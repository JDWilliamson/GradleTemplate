plugins {
    id 'java'
    id 'idea'
    id 'maven-publish'
}

group 'group'

// https://semver.org/
def release   = 0
def feature   = 1
def patch     = 0
def mainClass = "main"

version "$release.$feature.$patch".toString()

// Java target version
sourceCompatibility = 12
targetCompatibility = 12

repositories {
    mavenCentral()
    jcenter()
}

sourceSets {
    integration {
        compileClasspath += main.output + main.runtimeClasspath
        runtimeClasspath += main.output + main.runtimeClasspath
        java {
            srcDir "$projectDir/src/integration/java".toString()
        }
        resources {
            srcDir "$projectDir/src/integration/resources".toString()
        }
    }
    acceptance {
        compileClasspath += main.output + main.runtimeClasspath
        runtimeClasspath += main.output + main.runtimeClasspath
        java {
            srcDir "$projectDir/src/acceptance/java".toString()
        }
        resources {
            srcDir "$projectDir/src/acceptance/resources".toString()
        }
    }
}

idea {
    module {
        sourceDirs += file("$projectDir/src/main/java")
        sourceDirs -= file("$projectDir/src/integration/java")
        sourceDirs -= file("$projectDir/src/integration/resources")
        sourceDirs -= file("$projectDir/src/acceptance/java")
        sourceDirs -= file("$projectDir/src/acceptance/resources")
        testSourceDirs += project.sourceSets.integration.java.srcDirs
        testSourceDirs += project.sourceSets.integration.resources.srcDirs
        testSourceDirs += project.sourceSets.acceptance.java.srcDirs
        testSourceDirs += project.sourceSets.acceptance.resources.srcDirs
    }
}

jar {
    manifest {
        attributes(
            'Main-Class': "$group.$mainClass",
            'Manifest-Version': '1.0'
        )
    }
    from {
        configurations.runtime.collect {
            it.isDirectory() ? it : zipTree(it)
        }
    }
}

configurations {
    runtime.extendsFrom(implementation)
}

dependencies {
    // Sqlite
    implementation "org.xerial:sqlite-jdbc:3.21.0.1"

    // Jackson Json
    implementation "com.fasterxml.jackson.core:jackson-core:2.4.1"
    implementation "com.fasterxml.jackson.core:jackson-annotations:2.4.1"
    implementation "com.fasterxml.jackson.core:jackson-databind:2.4.1"

    // Mockito 2
    testImplementation "org.mockito:mockito-core:2.23.0"

    // JUnit 5
    testImplementation "org.junit.jupiter:junit-jupiter:5.5.1"
}

allprojects {
    gradle.projectsEvaluated {
        tasks.withType(JavaCompile) {
            options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation" << "--enable-preview"
        }
    }
}

task integration(type:Test)
task acceptance(type:Test)

configureVerificationTask(test, "Runs unit tests (located in src/test/...).")
configureVerificationTask(integration, "Runs integration tests (located in src/integration/...).")
configureVerificationTask(acceptance, "Runs acceptance tests (located in src/acceptance/...).")

check {
    acceptance.mustRunAfter 'integration'
    integration.mustRunAfter 'test'
    dependsOn 'test'
    dependsOn 'integration'
    dependsOn 'acceptance'
}

build {
    dependsOn 'check'
}


def configureVerificationTask(Task task, desc) {
    task.configure {
        useJUnitPlatform() // Enable JUnit 5
        cleanTask task // Always run tests, even when nothing changed.
        testLogging { // Show test results
            events "passed", "skipped", "failed"
            showStandardStreams = true
        }
        group "verification"
        description desc
        testClassesDirs = sourceSets.findByName(name).output.classesDirs
        classpath = sourceSets.findByName(name).runtimeClasspath
    }
}

static def cleanTask(Task task) {
    task.configure {
        dependsOn "clean${capitalize(name)}"
    }
}

static def capitalize(String word) {
    return "${Character.toTitleCase(word.charAt(0))}${word.substring(1)}"
}
