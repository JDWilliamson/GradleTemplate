plugins {
    id 'java'
    id 'idea'
}

group 'group'

// https://semver.org/
def release   = 0
def feature   = 1
def patch     = 0
def mainClass = "main"

version "$release.$feature.$patch".toString()

// Java target version
sourceCompatibility = 11

repositories {
    mavenCentral()
    jcenter()
}

sourceSets {
    integration {
        compileClasspath += main.output + main.runtimeClasspath
        runtimeClasspath += main.output + main.runtimeClasspath
        java {
            srcDir "$projectDir/src/integration/java".toString()
        }
        resources {
            srcDir "$projectDir/src/integration/resources".toString()
        }
    }
    acceptance {
        compileClasspath += main.output + main.runtimeClasspath
        runtimeClasspath += main.output + main.runtimeClasspath
        java {
            srcDir "$projectDir/src/acceptance/java".toString()
        }
        resources {
            srcDir "$projectDir/src/acceptance/resources".toString()
        }
    }
}

idea {
    module {
        sourceDirs += file("$projectDir/src/main/java")
        sourceDirs -= file("$projectDir/src/integration/java")
        sourceDirs -= file("$projectDir/src/integration/resources")
        sourceDirs -= file("$projectDir/src/acceptance/java")
        sourceDirs -= file("$projectDir/src/acceptance/resources")
        testSourceDirs += project.sourceSets.integration.java.srcDirs
        testSourceDirs += project.sourceSets.integration.resources.srcDirs
        testSourceDirs += project.sourceSets.acceptance.java.srcDirs
        testSourceDirs += project.sourceSets.acceptance.resources.srcDirs
    }
}

jar {
    manifest {
        attributes(
            'Main-Class': "$group.$mainClass",
            'Manifest-Version': '1.0'
        )
    }
    from {
        configurations.runtime.collect {
            it.isDirectory() ? it : zipTree(it)
        }
    }
}

configurations {
    runtime.extendsFrom(configurations.implementation)
    integrationImplementation.extendsFrom(configurations.testImplementation)
    acceptanceImplementation.extendsFrom(configurations.integrationImplementation)
}

dependencies {
    // Sqlite
    implementation "org.xerial:sqlite-jdbc:3.21.0.1"

    // Jackson Json
    implementation "com.fasterxml.jackson.core:jackson-core:2.4.1"
    implementation "com.fasterxml.jackson.core:jackson-annotations:2.4.1"
    implementation "com.fasterxml.jackson.core:jackson-databind:2.4.1"

    // Mockito 2
    testImplementation "org.mockito:mockito-core:2.23.0"

    // JUnit 5 (With JUnit 4 Compatibility)
    testImplementation "org.junit.platform:junit-platform-commons:1.1.0"
    testImplementation "org.junit.platform:junit-platform-console:1.1.0"
    testImplementation "org.junit.platform:junit-platform-engine:1.1.0"
    testImplementation "org.junit.platform:junit-platform-launcher:1.1.0"
    testImplementation "org.junit.platform:junit-platform-runner:1.1.0"
    testImplementation "org.junit.platform:junit-platform-suite-api:1.1.0"
    testImplementation "org.junit.platform:junit-platform-surefire-provider:1.1.0"
    testImplementation "org.junit.jupiter:junit-jupiter-api:5.1.0"
    testImplementation "org.junit.jupiter:junit-jupiter-engine:5.1.0"
    testImplementation "org.junit.jupiter:junit-jupiter-migrationsupport:5.1.0"
    testImplementation "org.junit.jupiter:junit-jupiter-params:5.1.0"
    testImplementation "org.junit.vintage:junit-vintage-engine:5.1.0"
}

test {
    // Enable JUnit 5 (Gradle 4.6+).
    useJUnitPlatform()

    // Always run tests, even when nothing changed.
    dependsOn 'cleanTest'

    // Show test results.
    testLogging {
        events "passed", "skipped", "failed"
    }
}

allprojects {
    gradle.projectsEvaluated {
        tasks.withType(JavaCompile) {
            options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
        }
    }
}

task integration(type:Test) {
    useJUnitPlatform()
    dependsOn('cleanIntegration')
    testLogging {
        events "passed", "skipped", "failed"
    }
    group = "verification"
    description = "Runs integration tests (located in src/integration/...)."
    testClassesDirs = sourceSets.integration.output.classesDirs
    classpath += sourceSets.integration.runtimeClasspath
}

task acceptance(type:Test) {
    useJUnitPlatform()
    dependsOn('cleanAcceptance')
    testLogging {
        events "passed", "skipped", "failed"
    }
    group "verification"
    description = "Runs acceptance tests (located in src/acceptance/...)."
    testClassesDirs += sourceSets.acceptance.output.classesDirs
    classpath += sourceSets.acceptance.runtimeClasspath
}

check {
    dependsOn 'test'
    dependsOn 'integration'
    dependsOn 'acceptance'
}

build {
    dependsOn 'check'
}
